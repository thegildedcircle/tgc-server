{"version":3,"sources":["ECS/entity.js","ECS/component.js","ECS/system.js","ECS/utils.js","ECS/index.js","index.js"],"names":["Entity","constructor","id","components","setID","addComponent","component","unique","some","c","name","console","warn","push","removeComponent","componentName","filter","hasComponent","getComponents","map","state","Component","Name","Value","value","Level","level","exp","Equippable","slot","Attributes","health","Attacking","target","System","greet","entities","e","forEach","log","attack","filterMap","t","EntityList","Array","predicate","fn","entity","shortid","generate","Manager","entityCount","systems","addEntity","reduce","removeEntity","getEntities","addSystem","system","runSystems","s","PORT","process","env","server","listen","socket","WebSocket","clients","on","ws","payload","man","ECS","find","dir","depth"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["export class Entity {\n  constructor () {\n    this.id = null\n    this.components = []\n  }\n  setID (id = '') {\n    this.id = id\n\n    return this\n  }\n\n  addComponent (component) {\n    if (!component.unique)\n      this.components.push(component)\n    else if (!this.components.some(c => c.name === component.name))\n      this.components.push(component)\n    else\n      console.warn(`Attempting to add non-unique component \"${component.name}\" to \"${this.id}\" when that component already exists!`)\n\n    return this\n  }\n\n  removeComponent (componentName) {\n    this.components = this.components.filter(c => c.name !== componentName)    \n\n    return this\n  }\n\n  hasComponent (componentName) {\n    return this.components.some(c => c.name === componentName)\n  }\n\n  getComponents (componentName) {\n    return this.components.filter(c => c.name === componentName)\n      .map(c => c.state)\n  }\n}\n","export const Component = {\n  /** Simple name component, this allows things to be identified in the game\n   *  world. Most things should have a name.\n   */\n  Name: (name = '') => ({\n    name: 'name',\n    unique: true,\n    state: name\n  }),\n  /** Entities have the Value component when they can be sold to a vendor or\n   *  traded between players. The component describes how much gold the entity\n   *  is worth, before taking into account any modifiers.\n   */\n  Value: (value = 0) => ({\n    name: 'value',\n    unique: true,\n    state: value\n  }),\n  /** The Level component is for entities such as players and enemies that can\n   *  earn experience, or otherwise have their functionality affected by their\n   *  level. \n   */\n  Level: (level = 1, exp = 0) => ({\n    name: 'level',\n    unique: true,\n    state: {\n      level,\n      exp\n    }\n  }),\n  /** \n   * \n   */\n  Equippable: (slot) => ({\n    name: 'equippable',\n    unique: true,\n    state: {\n      slot\n    }\n  }),\n  /**\n   * \n   */\n  Attributes: (health = 100) => ({\n    name: 'attributes',\n    unique: true,\n    state: {\n      health\n    }\n  }),\n  /**\n   * \n   */\n  Attacking: (target) => ({\n    name: 'attacking',\n    unique: false,\n    state: target\n  })\n}","export const System = {\n  greet: (entities) => {\n    entities.filter(e => e.hasComponent('name'))\n      .forEach(e => console.log(`Hello ${e.getComponents('name')[0]}!`))\n\n    return entities\n  },\n\n  attack: (entities) => {\n    // - For every entity that has an attacking component\n    // - apply some damage to the target entities health attribute\n    return entities.filterMap(e => e.hasComponent('attacking'), e => {\n      e.getComponents('attacking').forEach(target =>\n        entities.filterMap(t => t.id === target, t => {\n          t.getComponents('attributes')[0].health -= e.getComponents('level')[0].level\n\n          return t\n        })\n      )\n\n      return e\n    })\n\n    // return entities.map(e =>\n    //    e.hasComponent('attacking')\n    //     ? (e.getComponents('attacking').forEach(target => {\n    //         entities.map(t => t.id === target\n    //           ? (t.getComponents('attributes')[0].health -= e.getComponents('level')[0].level, t)\n    //           : t)\n    //       }), e)\n    //     : e\n    // )\n  },\n\n  // checkDead: (entites) => {\n  //   // CHeck health = 0\n  //   // Stop things attacking it\n  //   // Stop attacking things\n  //   return entites.map(e => {\n  //     if (e.hasComponent('attributes') && e.getComponents('attributes')[0].health <= 0) {\n  //       const id = e.id\n\n  //       entites.map()\n  //     }\n  //   })\n  // }\n}","import shortid from 'shortid'\n\nexport class EntityList extends Array {\n  filterMap (predicate, fn) {\n    return this.map(entity => predicate(entity) ? fn(entity) : entity)\n  }\n\n  push (entity) {\n    super.push(entity.setID(shortid.generate()))\n\n    return this\n  }\n}\n","import { Entity } from './entity'\nimport { Component } from './component'\nimport { System } from './system'\n\nimport { EntityList } from './utils'\n\nexport default {\n  Entity,\n  Component,\n  System,\n  Manager: class Manager {\n    constructor () {\n      this.entityCount = 0\n      this.entities = new EntityList()\n      this.systems = []\n\n      return this\n    }\n\n    addEntity (components = []) {\n      this.entities.push(components.reduce((e, c) => e.addComponent(c), new Entity()))\n\n      return this\n    }\n\n    removeEntity (id) {\n      this.entities = this.entities.filter(e => e.id !== id)\n\n      return this\n    }\n\n    getEntities () {\n      return this.entities\n    }\n\n    addSystem (system) {\n      this.systems.push(system)\n      \n      return this\n    }\n\n    runSystems () {\n      this.entities = this.systems.reduce((e, s) => (e = s(e)), this.entities)\n\n      return this\n    }\n  }\n}","import express from 'express'\nimport lowdb from 'lowdb'\nimport { Server as WebSocket } from 'ws'\n\n// Constants -------------------------------------------------------------------\nconst PORT = process.env.PORT || 3000\n\n// Express Server --------------------------------------------------------------\nconst server = express()\n  .listen(PORT, () => {\n    \n  })\n\n// Web Socket ------------------------------------------------------------------\nconst socket = new WebSocket({ server })\nconst clients = {}\n\nsocket.on('connection', ws => {\n  ws.on('message', payload => {\n    console.log(payload)\n  })\n\n  ws.on('close', () => {\n\n  })\n})\n\nimport ECS from './ECS'\nconst man = new ECS.Manager()\nman\n  .addEntity([\n    ECS.Component.Name('andy'),\n    ECS.Component.Attributes(),\n    ECS.Component.Level(),\n  ])\n  .addEntity([\n    ECS.Component.Name('alex'),\n    ECS.Component.Attributes(),\n    ECS.Component.Level(),\n    ECS.Component.Attacking(\n      man.getEntities()\n        .find(e => e.getComponents('name')[0] === 'andy')\n        .id\n    )\n  ])\n  .addSystem(ECS.System.attack)\n  .runSystems()\n\nconsole.dir(man, { depth: null })\n"]}