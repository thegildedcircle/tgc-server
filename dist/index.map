{"version":3,"sources":["ECS/entity.js","ECS/component.js","ECS/system.js","ECS/index.js","index.js"],"names":["Entity","constructor","id","components","addComponent","component","unique","some","c","name","console","warn","push","removeComponent","componentName","filter","hasComponent","getComponent","map","state","Component","Name","Value","value","Level","level","exp","Equippable","Attributes","health","System","greet","entities","e","forEach","log","PORT","process","env","server","listen","socket","WebSocket","clients","on","ws","payload","andy","ECS","alex","noGreet","entites"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["export class Entity {\n  constructor (id, components = []) {\n    this.id = id\n    this.components = components\n  }\n\n  addComponent (component) {\n    if (!component.unique)\n      this.components.push(component)\n    else if (!this.components.some(c => c.name === component.name))\n      this.components.push(component)\n    else\n      console.warn(`Attempting to add non-unique component \"${component.name}\" to \"${this.id}\" when that component already exists!`)\n\n    return this\n  }\n\n  removeComponent (componentName) {\n    this.components = this.components.filter(c => c.name !== componentName)    \n\n    return this\n  }\n\n  hasComponent (componentName) {\n    return this.components.some(c => c.name === componentName)\n  }\n\n  getComponent (componentName) {\n    return this.components.filter(c => c.name === componentName)\n      .map(c => c.state)\n  }\n}","export const Component = {\n  /** Simple name component, this allows things to be identified in the game\n   *  world. Most things should have a name.\n   */\n  Name: (name = '') => ({\n    name: 'name',\n    unique: true,\n    state: name\n  }),\n  /** Entities have the Value component when they can be sold to a vendor or\n   *  traded between players. The component describes how much gold the entity\n   *  is worth, before taking into account any modifiers.\n   */\n  Value: (value = 0) => ({\n    name: 'value',\n    unique: true,\n    state: value\n  }),\n  /** The Level component is for entities such as players and enemies that can\n   *  earn experience, or otherwise have their functionality affected by their\n   *  level. \n   */\n  Level: (level = 1, exp = 0) => ({\n    name: 'level',\n    unique: true,\n    state: {\n      level,\n      exp\n    }\n  }),\n  /** \n   * \n   */\n  Equippable: () => ({\n    name: 'equippable',\n    unique: true,\n    state: true\n  }),\n  /**\n   * \n   */\n  Attributes: (health = 100) => ({\n    name: 'attributes',\n    unique: true,\n    state: {\n      health\n    }\n  }),\n}","export const System = {\n  greet: (entities) => {\n    entities.filter(e => e.hasComponent('name'))\n      .forEach(e => console.log(`Hello ${e.getComponent('name')[0]}!`))\n\n    return entities\n  }\n}","export { Entity } from './entity'\nexport { Component } from './component'\nexport { System } from './system'\n\nexport default {\n  Entity,\n  Component,\n  System\n}\n","import express from 'express'\nimport lowdb from 'lowdb'\nimport { Server as WebSocket } from 'ws'\n\n// Constants -------------------------------------------------------------------\nconst PORT = process.env.PORT || 3000\n\n// Express Server --------------------------------------------------------------\nconst server = express()\n  .listen(PORT, () => {\n    \n  })\n\n// Web Socket ------------------------------------------------------------------\nconst socket = new WebSocket({ server })\nconst clients = {}\n\nsocket.on('connection', ws => {\n  ws.on('message', payload => {\n    console.log(payload)\n  })\n\n  ws.on('close', () => {\n\n  })\n})\n\nimport ECS from './ECS'\n\nconst andy = new ECS.Entity('E+Andy', [])\n  .addComponent(ECS.Component.Attributes())\n  .addComponent(ECS.Component.Level(10, 100))\n  .addComponent(ECS.Component.Name('andy'))\n\nconst alex = new ECS.Entity('E+Alex', [])\n  .addComponent(ECS.Component.Attributes())\n  .addComponent(ECS.Component.Level(10, 100))\n  .addComponent(ECS.Component.Name('alex'))\n\nconst noGreet = new ECS.Entity('E+NoGreet', [])\n  .addComponent(ECS.Component.Attributes())\n  .addComponent(ECS.Component.Level(10, 100))\n\nconst entites = [ andy, noGreet, alex ]\n\nECS.System.greet(entites)"]}