{"version":3,"sources":["index.js"],"names":["PORT","process","env","server","listen","socket","WebSocket","clients","on","ws","payload","JSON","parse","console","log","command","data","username","send","stringify","message","err","app","Elm","Engine","init","ports","debugLog","subscribe","msg","dir","depth"],"mappings":";;;AAoDA,aApDA,IAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,UACA,EAAA,QAAA,MAiDA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA9CA,MAAMA,EAAOC,QAAQC,IAAIF,MAAQ,IAG3BG,GAAS,EACZC,EAAAA,WAAAA,OAAOJ,EAAM,QAKVK,EAAS,IAAIC,EAAJ,OAAc,CAAEH,OAAAA,IACzBI,EAAU,GAEhBF,EAAOG,GAAG,aAAcC,IACtBA,EAAGD,GAAG,UAAWE,IAKPA,OAJRA,EAAUC,KAAKC,MAAMF,GAErBG,QAAQC,IAAIJ,GAEJA,EAAQK,SACT,IAAA,QACCR,EAAQG,EAAQM,KAAKC,UACvBR,EAAGS,KAAKP,KAAKQ,UAAU,CACrBC,WAAYV,EAAQM,KAAKC,mCACvBI,GAAOR,QAAQC,IAAIO,KAEvBd,EAAQG,EAAQM,KAAKC,UAAYR,EACjCA,EAAGS,KAAKP,KAAKQ,UAAU,CACrBC,wBAAyBV,EAAQM,KAAKC,aACpCI,GAAOR,QAAQC,IAAIO,QAK/BZ,EAAGD,GAAG,QAAS,KACbK,QAAQC,IAAI,2BAOhB,MAAMQ,EAAMC,EAAIC,IAAAA,OAAOC,KAAK,IAK5BH,EAAII,MAAMC,SAASC,UAAUC,IAC3BhB,QAAQiB,IAAID,EAAK,CAAEE,MAAO","file":"index.map","sourceRoot":"../src","sourcesContent":["import { Elm } from './Engine.elm'\nimport express from 'express'\nimport lowdb from 'lowdb'\nimport { Server as WebSocket } from 'ws'\n\n// Constants -------------------------------------------------------------------\nconst PORT = process.env.PORT || 3000\n\n// Express Server --------------------------------------------------------------\nconst server = express()\n  .listen(PORT, () => {\n    \n  })\n\n// Web Socket ------------------------------------------------------------------\nconst socket = new WebSocket({ server })\nconst clients = {}\n\nsocket.on('connection', ws => {\n  ws.on('message', payload => {\n    payload = JSON.parse(payload)\n\n    console.log(payload)\n\n    switch (payload.command) {\n      case 'login':\n        if (clients[payload.data.username]) {\n          ws.send(JSON.stringify({\n            message: `${payload.data.username} is already logged in.`\n          }), err => console.log(err))\n        } else {\n          clients[payload.data.username] = ws\n          ws.send(JSON.stringify({\n            message: `Logged in as ${payload.data.username}`\n          }), err => console.log(err))\n        }\n    }\n  })\n\n  ws.on('close', () => {\n    console.log('Client disconnected')\n  })\n})\n\n\n\n// Elm Game Engine -------------------------------------------------------------\nconst app = Elm.Engine.init({\n\n})\n\n// Elm -> Js port subscriptions ------------------------------------------------\napp.ports.debugLog.subscribe(msg => {\n  console.dir(msg, { depth: null })\n})\n\n"]}