{"version":3,"sources":["ECS/entity.js","ECS/component.js","ECS/system.js","ECS/utils.js","ECS/manager.js","ECS/index.js","main.js"],"names":["Entity","constructor","id","components","setID","addComponent","component","unique","some","c","name","console","warn","push","removeComponents","componentName","predicate","filter","state","hasComponent","getComponents","map","Component","Name","Value","value","Level","level","exp","Equippable","slot","Attributes","health","Attacking","target","System","greet","entities","e","forEach","log","attack","filterMap","t","checkDead","entity","EntityList","Array","fn","shortid","generate","Manager","entityCount","systems","addEntity","reduce","removeEntity","getEntities","updateEntities","addSystem","system","runSystems","s","PORT","process","env","server","listen","socket","WebSocket","clients","on","ws","payload","man","ECS","find","i","dir","depth"],"mappings":"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","file":"main.map","sourceRoot":"../src","sourcesContent":["export class Entity {\n  constructor() {\n    this.id = null;\n    this.components = [];\n  }\n  setID(id = \"\") {\n    this.id = id;\n\n    return this;\n  }\n\n  addComponent(component) {\n    if (!component.unique) this.components.push(component);\n    else if (!this.components.some(c => c.name === component.name))\n      this.components.push(component);\n    else\n      console.warn(\n        `Attempting to add non-unique component \"${component.name}\" to \"${\n          this.id\n        }\" when that component already exists!`\n      );\n\n    return this;\n  }\n\n  removeComponents(componentName, predicate) {\n    this.components = this.components.filter(\n      c => !(c.name === componentName && predicate(c.state))\n    );\n\n    return this;\n  }\n\n  hasComponent(componentName) {\n    return this.components.some(c => c.name === componentName);\n  }\n\n  getComponents(componentName) {\n    return this.components\n      .filter(c => c.name === componentName)\n      .map(c => c.state);\n  }\n}\n","export const Component = {\n  /** Simple name component, this allows things to be identified in the game\n   *  world. Most things should have a name.\n   */\n  Name: (name = \"\") => ({\n    name: \"name\",\n    unique: true,\n    state: name\n  }),\n  /** Entities have the Value component when they can be sold to a vendor or\n   *  traded between players. The component describes how much gold the entity\n   *  is worth, before taking into account any modifiers.\n   */\n  Value: (value = 0) => ({\n    name: \"value\",\n    unique: true,\n    state: value\n  }),\n  /** The Level component is for entities such as players and enemies that can\n   *  earn experience, or otherwise have their functionality affected by their\n   *  level.\n   */\n  Level: (level = 1, exp = 0) => ({\n    name: \"level\",\n    unique: true,\n    state: {\n      level,\n      exp\n    }\n  }),\n  /**\n   *\n   */\n  Equippable: slot => ({\n    name: \"equippable\",\n    unique: true,\n    state: {\n      slot\n    }\n  }),\n  /**\n   *\n   */\n  Attributes: (health = 100) => ({\n    name: \"attributes\",\n    unique: true,\n    state: {\n      health\n    }\n  }),\n  /**\n   *\n   */\n  Attacking: target => ({\n    name: \"attacking\",\n    unique: false,\n    state: target\n  })\n};\n","export const System = {\n  greet: entities => {\n    entities\n      .filter(e => e.hasComponent(\"name\"))\n      .forEach(e => console.log(`Hello ${e.getComponents(\"name\")[0]}!`));\n\n    return entities;\n  },\n\n  attack: entities => {\n    // - For every entity that has an attacking component\n    // - apply some damage to the target entities health attribute\n    return entities.filterMap(\n      e => e.hasComponent(\"attacking\"),\n      e => {\n        e.getComponents(\"attacking\").forEach(target =>\n          entities.filterMap(\n            t => t.id === target,\n            t => {\n              t.getComponents(\"attributes\")[0].health -= e.getComponents(\n                \"level\"\n              )[0].level;\n\n              return t;\n            }\n          )\n        );\n\n        return e;\n      }\n    );\n  },\n\n  checkDead: entities => {\n    return entities.filterMap(\n      e =>\n        e.hasComponent(\"attributes\") &&\n        e.getComponents(\"attributes\")[0].health <= 0,\n      entity => {\n        // Stop things attack this\n        entities.filterMap(\n          e => e.hasComponent(\"attacking\"),\n          e => e.removeComponents(\"attacking\", c => c === entity.id)\n        );\n        // Stop this attacking things\n        // entity.removeComponents(\"attacking\", c => true);\n\n        return entity;\n      }\n    );\n  }\n};\n","import shortid from \"shortid\";\n\nexport class EntityList extends Array {\n  filterMap(predicate, fn) {\n    return this.map(entity => (predicate(entity) ? fn(entity) : entity));\n  }\n\n  push(entity) {\n    super.push(entity.setID(shortid.generate()));\n\n    return this;\n  }\n}\n","import { Entity } from \"./entity\";\nimport { EntityList } from \"./utils\";\n\nexport class Manager {\n  constructor() {\n    this.entityCount = 0;\n    this.entities = new EntityList();\n    this.systems = [];\n\n    return this;\n  }\n\n  addEntity(components = []) {\n    this.entities.push(\n      components.reduce((e, c) => e.addComponent(c), new Entity())\n    );\n\n    return this;\n  }\n\n  removeEntity(id) {\n    this.entities = this.entities.filter(e => e.id !== id);\n\n    return this;\n  }\n\n  getEntities() {\n    return this.entities;\n  }\n\n  updateEntities(predicate, fn) {\n    this.entities = this.entities.filterMap(predicate, fn);\n\n    return this;\n  }\n\n  addSystem(system) {\n    this.systems.push(system);\n\n    return this;\n  }\n\n  runSystems() {\n    this.entities = this.systems.reduce((e, s) => (e = s(e)), this.entities);\n\n    return this;\n  }\n}\n","import { Entity } from \"./entity\";\nimport { Component } from \"./component\";\nimport { System } from \"./system\";\nimport { Manager } from \"./manager\";\n\nimport { EntityList } from \"./utils\";\n\nexport default {\n  Entity,\n  Component,\n  System,\n  Manager\n};\n","import express from \"express\";\nimport lowdb from \"lowdb\";\nimport { Server as WebSocket } from \"ws\";\n\n// Constants -------------------------------------------------------------------\nconst PORT = process.env.PORT || 3000;\n\n// Express Server --------------------------------------------------------------\nconst server = express().listen(PORT, () => {});\n\n// Web Socket ------------------------------------------------------------------\nconst socket = new WebSocket({ server });\nconst clients = {};\n\nsocket.on(\"connection\", ws => {\n  ws.on(\"message\", payload => {\n    console.log(payload);\n  });\n\n  ws.on(\"close\", () => {});\n});\n\nimport ECS from \"./ECS\";\nconst man = new ECS.Manager();\nman\n  .addEntity([\n    ECS.Component.Name(\"andy\"),\n    ECS.Component.Attributes(),\n    ECS.Component.Level()\n  ])\n  .addEntity([\n    ECS.Component.Name(\"alex\"),\n    ECS.Component.Attributes(150),\n    ECS.Component.Level(),\n    ECS.Component.Attacking(\n      man.getEntities().find(e => e.getComponents(\"name\")[0] === \"andy\").id\n    )\n  ])\n  .updateEntities(\n    e => e.hasComponent(\"name\") && e.getComponents(\"name\")[0] === \"andy\",\n    e =>\n      e.addComponent(\n        ECS.Component.Attacking(\n          man.getEntities().find(e => e.getComponents(\"name\")[0] === \"alex\").id\n        )\n      )\n  )\n  .addSystem(ECS.System.attack)\n  .addSystem(ECS.System.checkDead);\n\nfor (let i = 0; i <= 200; i++) {\n  man.runSystems();\n}\n\nconsole.dir(man, { depth: null });\n"]}