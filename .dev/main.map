{"version":3,"sources":["ECS/entity.js","ECS/component.js","ECS/system.js","ECS/utils.js","ECS/manager.js","ECS/index.js","main.js"],"names":["Entity","constructor","id","components","setID","addComponent","component","unique","some","c","name","console","warn","push","removeComponents","componentName","predicate","filter","state","hasComponent","getComponents","map","Component","Name","Value","value","Level","level","exp","Equippable","slotOptions","Inventory","itemIDs","Equipped","head","back","torso","legs","hands","feet","mainhand","offhand","ring1","ring2","Damage","DamageModifier","Attributes","health","Attacking","targetID","damage","System","attack","entities","mapIf","e","forEach","target","t","checkDead","entity","calculateDamage","EntityList","Array","fn","shortid","generate","Manager","entityCount","systems","addEntity","reduce","removeEntity","getEntities","updateEntities","addSystem","system","runSystems","s","PORT","process","env","server","listen","socket","WebSocket","clients","on","ws","payload","log","man","ECS","swordID","battleaxeID","hoodedCloakID","andyID","alexID","find","i","dir","depth"],"mappings":"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","file":"main.map","sourceRoot":"../src","sourcesContent":["export class Entity {\n  constructor() {\n    this.id = null;\n    this.components = [];\n  }\n\n  setID(id = \"\") {\n    this.id = id;\n\n    return this;\n  }\n\n  addComponent(component) {\n    if (!component.unique) this.components.push(component);\n    else if (!this.components.some(c => c.name === component.name))\n      this.components.push(component);\n    else\n      console.warn(\n        `Attempting to add non-unique component \"${component.name}\" to \"${\n          this.id\n        }\" when that component already exists!`\n      );\n\n    return this;\n  }\n\n  removeComponents(componentName, predicate) {\n    this.components = this.components.filter(\n      c => !(c.name === componentName && predicate(c.state))\n    );\n\n    return this;\n  }\n\n  hasComponent(componentName) {\n    return this.components.some(c => c.name === componentName);\n  }\n\n  getComponents(componentName) {\n    return this.components\n      .filter(c => c.name === componentName)\n      .map(c => c.state);\n  }\n}\n","export const Component = {\n  /** Simple name component, this allows things to be identified in the game\n   *  world. Most things should have a name.\n   */\n  Name: (name = \"\") => ({\n    name: \"name\",\n    unique: true,\n    state: name,\n  }),\n  /** Entities have the Value component when they can be sold to a vendor or\n   *  traded between players. The component describes how much gold the entity\n   *  is worth, before taking into account any modifiers.\n   */\n  Value: (value = 0) => ({\n    name: \"value\",\n    unique: true,\n    state: value,\n  }),\n  /** The Level component is for entities such as players and enemies that can\n   *  earn experience, or otherwise have their functionality affected by their\n   *  level.\n   */\n  Level: (level = 1, exp = 0) => ({\n    name: \"level\",\n    unique: true,\n    state: {\n      level,\n      exp,\n    },\n  }),\n  /**\n   *\n   */\n  Equippable: (...slotOptions) => ({\n    name: \"equippable\",\n    unique: true,\n    state: {\n      slotOptions,\n    },\n  }),\n  /**\n   *\n   */\n  Inventory: (itemIDs = []) => ({\n    name: \"inventory\",\n    unique: true,\n    state: itemIDs,\n  }),\n  /**\n   *\n   */\n  Equipped: ({\n    head = null,\n    back = null,\n    torso = null,\n    legs = null,\n    hands = null,\n    feet = null,\n    mainhand = null,\n    offhand = null,\n    ring1 = null,\n    ring2 = null,\n  } = {}) => ({\n    name: \"equipped\",\n    unique: true,\n    state: {\n      head,\n      back,\n      torso,\n      legs,\n      hands,\n      feet,\n      mainhand,\n      offhand,\n      ring1,\n      ring2,\n    },\n  }),\n  /**\n   *\n   */\n  Damage: (value = 0) => ({\n    name: \"damage\",\n    unique: false,\n    state: value,\n  }),\n  /**\n   *\n   */\n  DamageModifier: (value = 0) => ({\n    name: \"damageModifier\",\n    unique: false,\n    state: value,\n  }),\n  /**\n   *\n   */\n  Attributes: (health = 100) => ({\n    name: \"attributes\",\n    unique: true,\n    state: {\n      health,\n    },\n  }),\n  /**\n   *\n   */\n  Attacking: (targetID, damage = 0) => ({\n    name: \"attacking\",\n    unique: false,\n    state: {\n      id: targetID,\n      damage,\n    },\n  }),\n};\n","export const System = {\n  attack: entities => {\n    return entities.mapIf(\n      e => e.hasComponent(\"attacking\"),\n      e => {\n        e.getComponents(\"attacking\").forEach(target =>\n          entities.mapIf(\n            t => t.id === target.id,\n            t => {\n              t.getComponents(\"attributes\")[0].health -= target.damage;\n\n              return t;\n            }\n          )\n        );\n\n        return e;\n      }\n    );\n  },\n\n  checkDead: entities => {\n    return entities.mapIf(\n      e => e.hasComponent(\"attributes\") && e.getComponents(\"attributes\")[0].health <= 0,\n      entity => {\n        entity.removeComponents(\"attacking\", c => true);\n        entities.mapIf(\n          e => e.hasComponent(\"attacking\"),\n          e => e.removeComponents(\"attacking\", c => c === entity.id)\n        );\n\n        return entity;\n      }\n    );\n  },\n\n  calculateDamage: entities => {\n    const attackingEntities = entities.filter(e => e.hasComponent(\"attacking\"));\n    const entitiesWithDamageModifiers = entities.filter(e => e.hasComponent(\"damageModifier\"));\n    // Loop through all attacking entities, if they have damage modifiers directly applied then\n    // add this damage to their attacking components' damage state.\n    //\n    // Loop through all attackingEntities and work out which ones have equippedItems, loop through\n    // equipped items and add any damage modifier amounts to the attacking entities' attacking\n    // components' damage state\n  },\n};\n","import shortid from \"shortid\";\n\nexport class EntityList extends Array {\n  mapIf(predicate, fn) {\n    return this.map(entity => (predicate(entity) ? fn(entity) : entity));\n  }\n\n  push(entity) {\n    super.push(entity.setID(shortid.generate()));\n\n    return entity;\n  }\n}\n","import { Entity } from \"./entity\";\nimport { EntityList } from \"./utils\";\n\nexport class Manager {\n  constructor() {\n    this.entityCount = 0;\n    this.entities = new EntityList();\n    this.systems = [];\n\n    return this;\n  }\n\n  addEntity(components = []) {\n    const entity = this.entities.push(components.reduce((e, c) => e.addComponent(c), new Entity()));\n\n    return entity.id;\n  }\n\n  removeEntity(id) {\n    this.entities = this.entities.filter(e => e.id !== id);\n\n    return this;\n  }\n\n  getEntities() {\n    return this.entities;\n  }\n\n  updateEntities(predicate, fn) {\n    this.entities = this.entities.mapIf(predicate, fn);\n\n    return this;\n  }\n\n  addSystem(system) {\n    this.systems.push(system);\n\n    return this;\n  }\n\n  runSystems() {\n    this.entities = this.systems.reduce((e, s) => (e = s(e)), this.entities);\n\n    return this;\n  }\n}\n","import { Entity } from \"./entity\";\nimport { Component } from \"./component\";\nimport { System } from \"./system\";\nimport { Manager } from \"./manager\";\n\nimport { EntityList } from \"./utils\";\n\nexport default {\n  Entity,\n  Component,\n  System,\n  Manager,\n};\n","import express from \"express\";\nimport lowdb from \"lowdb\";\nimport { Server as WebSocket } from \"ws\";\n\n// Constants -------------------------------------------------------------------\nconst PORT = process.env.PORT || 3000;\n\n// Express Server --------------------------------------------------------------\nconst server = express().listen(PORT, () => {});\n\n// Web Socket ------------------------------------------------------------------\nconst socket = new WebSocket({ server });\nconst clients = {};\n\nsocket.on(\"connection\", ws => {\n  ws.on(\"message\", payload => {\n    console.log(payload);\n  });\n\n  ws.on(\"close\", () => {});\n});\n\nimport ECS from \"./ECS\";\nconst man = new ECS.Manager();\nconst swordID = man.addEntity([\n  ECS.Component.Name(\"sword\"),\n  ECS.Component.Value(10),\n  ECS.Component.Equippable([\"mainhand\"], [\"offhand\"]),\n  ECS.Component.DamageModifier(5),\n]);\nconst battleaxeID = man.addEntity([\n  ECS.Component.Name(\"battleaxe\"),\n  ECS.Component.Value(10),\n  ECS.Component.Equippable([\"mainhand\", \"offhand\"]),\n  ECS.Component.DamageModifier(8),\n]);\nconst hoodedCloakID = man.addEntity([\n  ECS.Component.Name(\"hoodedCloak\"),\n  ECS.Component.Value(8),\n  ECS.Component.Equippable([\"head\", \"back\"]),\n]);\nconst andyID = man.addEntity([\n  ECS.Component.Name(\"andy\"),\n  ECS.Component.Attributes(),\n  ECS.Component.Level(),\n  ECS.Component.Inventory(),\n  // ECS.Component.Inventory([man.getEntities().find(e => e.getComponents(\"name\")[0] === \"sword\").id]),\n  ECS.Component.Equipped({ mainhand: swordID }),\n]);\nconst alexID = man.addEntity([\n  ECS.Component.Name(\"alex\"),\n  ECS.Component.Attributes(150),\n  ECS.Component.Level(),\n  ECS.Component.Attacking(man.getEntities().find(e => e.getComponents(\"name\")[0] === \"andy\").id, 3),\n  ECS.Component.Inventory(),\n  // ECS.Component.Inventory([\n  // man.getEntities().find(e => e.getComponents(\"name\")[0] === \"battleaxe\").id,\n  // ]),\n  ECS.Component.Equipped({ mainhand: battleaxeID, offhand: battleaxeID }),\n]);\nman\n  .updateEntities(\n    e => e.hasComponent(\"name\") && e.getComponents(\"name\")[0] === \"andy\",\n    e =>\n      e.addComponent(\n        ECS.Component.Attacking(\n          man.getEntities().find(e => e.getComponents(\"name\")[0] === \"alex\").id,\n          5\n        )\n      )\n  )\n  .addSystem(ECS.System.attack)\n  .addSystem(ECS.System.checkDead);\n\nfor (let i = 0; i <= 200; i++) {\n  man.runSystems();\n}\n\nconsole.dir(man, { depth: null });\n"]}